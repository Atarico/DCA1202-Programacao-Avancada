Questão 1-
Os ponteiros permitem a manipulação de variáveis em diversas partes do código sem que seja necessária a cópia do valor dessas variáveis, já que através dos ponteiros pode-se acessar o valor das variáveis usando apenas seu endereço na memória.
Quando se trata de programas curtos, essa característica dos ponteiros talvez não seja de grande necessidade. Mas, em programas que tratam uma quantidade grande de dados, ou em programas embarcados que lidam com memória e hardware limitados, a utilização de ponteiros é necessária para garantir uma boa performance.


Questão 2-
p == &i; essa expressão vale 1
*p - *q; essa expressão vale -2
**&p; essa expressão vale 3
3 - *p/(*q) + 7;essa expressão vale 0


Questão 3-
printf("%x %d %d %d %d", p,*p+2,**&p,3**p,**&p+4); vai imprimir:
FFE 7 5 15 9


Questão 4-
p = i; -> atribuição ilegal
q = &j;
p = &*&i;
i = (*&)j; -> atribuição ilegal
i = *&j;
i = *&*&j;
q = *p; -> atribuição ilegal
i = (*p)++ + *q;


Questão 5-
20
29.0
P
e
P
e
t
31
45
27
31
45
27


Questão 6-
contador/valor/valor/endereco/endereco                                                                                                                                                      
i = 0vet[0] = 1.1*(f + 0) = 1.1&vet[0] = 3F951830(f + 0) = 3F951830                                                                                                                         
i = 1vet[1] = 2.2*(f + 1) = 2.2&vet[1] = 3F951834(f + 1) = 3F951834                                                                                                                         
i = 2vet[2] = 3.3*(f + 2) = 3.3&vet[2] = 3F951838(f + 2) = 3F951838                                                                                                                         
i = 3vet[3] = 4.4*(f + 3) = 4.4&vet[3] = 3F95183C(f + 3) = 3F95183C                                                                                                                         
i = 4vet[4] = 5.5*(f + 4) = 5.5&vet[4] = 3F951840(f + 4) = 3F951840


Questão 7-
*(pulo + 2); -> apenas essa expressão referencia o valor da terceira posição do vetor pulo
*(pulo + 4);
pulo + 4;
pulo + 2;


Questão 8-
p = mat + 1; -> expressão válida, pois estamos atribuindo uma posição de memória incrementada de um a um ponteiro de mesmo tipo
p = mat++; -> expressão inválida pois não se pode usar os operadores ++ ou -- em um array, já que não se pode mudar a posição de um array (diferentemente de um ponteiro)
p = ++mat; -> expressão inválida pelo mesmo motivo da expressão anterior
x = (*mat)++; -> expressão válida, pois estamos pegando o conteúdo do vetor mat na posição 0 (*mat) que é um inteiro e colocando-o na variável x que também é inteira


Questão 9-
O primeiro programa imprime os valores do vetor "vet", ou seja, imprime 4 9 13
Já o segundo programa imprime os endereços de memória de cada posição do vetor em hexadecimal


Questão 10-
se x for declarado como char: x+1 = 4093, x+2=4094, x+3=4095
se x for declarado como int: x+1 = 4094, x+2 = 4096, x+3 = 4098
se x for declarado como float: x+1 = 4096, x+2 = 4100, x+3 = 4104
se x for declarado como double: x+1 = 4100, x+2 = 4108, x+3 = 4116


Questão 11-
Como num computador real os tamanhos dos tipos de dados não são iguais aos do problema 10, no nosso programa teremos que levar em conta
o tamanho real dos nossos tipos de dados utilizando a função sizeof(tipo). Programa:

#include <stdio.h>

int main(){
  char x0[] = {4,9,13,15};
  int x1[] = {4,9,13,15};
  float x2[] = {4,9,13,15};
  double x3[] = {4,9,13,15};
  int sizeChar= sizeof(char);
  int sizeInt = sizeof(int);
  int sizeFloat = sizeof(float);
  int sizeDouble = sizeof(double);
  printf("\n size char: %d", sizeChar);
  printf("\n size int: %d", sizeInt);
  printf("\n size float: %d", sizeFloat);
  printf("\n size double: %d", sizeDouble);
  int i;
  
  printf("\n char: ");
  for(i=1;i<=3;i++){
    printf("x+%d = %u ",i, x0+i);
  }
  printf("\n int: ");
  for(i=1;i<=3;i++){
    printf("x+%d = %u ",i,x1+i);
  }
  printf("\n float: ");
  for(i=1;i<=3;i++){
    printf("x+%d = %u ",i,x2+i);
  }
  printf("\n double: ");
  for(i=1;i<=3;i++){
    printf("x+%d = %u ",i,x3+i);
  }
}

A saída desse programa, no meu computador, é:
size char: 1                                                                                                                                                                               
size int: 4                                                                                                                                                                                
size float: 4                                                                                                                                                                              
size double: 8                                                                                                                                                                             
char: x+1 = 2208327697 x+2 = 2208327698 x+3 = 2208327699                                                                                                                                   
int: x+1 = 2208327636 x+2 = 2208327640 x+3 = 2208327644                                                                                                                                    
float: x+1 = 2208327652 x+2 = 2208327656 x+3 = 2208327660                                                                                                                                  
double: x+1 = 2208327672 x+2 = 2208327680 x+3 = 2208327688

Ou seja, dá para ver claramente que o vetor char pula de endereço de 1 em 1 byte, o vetor int de 4 em 4 bytes, 
e assim em diante, todos correspondendo ao valor do seu sizeof


Questão 12-
aloha[2] = value; -> válido
scanf("%f", &aloha); -> inválido
aloha = value"; -> inválido
printf("%f", aloha); -> inválido
coisas[4][4] = aloha[3]; -> válido
coisas[5] = aloha; -> inválido
pf = value; -> inválido
pf = aloha; -> válido


Questão 13-
É um ponteiro que aponta para uma função em vez de uma variável. Ou seja, com isso podemos passar uma função como parametro de outras funções, 
já que na função ponteiro estamos armazenando apenas o inicio do código executável da função que desejamos usar.

Ex de uso: uma função geral que chama uma função genérica

#include <stdio.h>

int soma(int x, int y){
    return x+y;
}
int subtracao(int x, int y){
    return x-y;
}
int (*operacao)(int, int);

int conta(int x, int y, int (*op)){
    operacao = op;
    return operacao(x, y);
}

int main(){
    printf("%d\n", conta(2, 2, soma));
    printf("%d\n", conta(6, 3, subtracao));
}


Questão 14-
#include <stdio.h>
#include <stdlib.h>

int main(){
    float *x;
    int i,j,n, tmp;
    printf("insira a qntd de floats");
    scanf("%d", &n);
    
    x = (float *) malloc(n * sizeof(float));
    for (i = 0; i < n; i++){
        printf("\nvalor pra posicao %d do vetor: ", i+1);
        scanf("%f",&x[i]);
    }
    
    //sorting
    for(i = 0; i<n; i++){
        for(j = i+1; j<n; j++){
            if(x[i] > x[j]){
                tmp = x[i];
                x[i] = x[j];
                x[j] = tmp;
            }
        }
    }
    
    for(i = 0; i<n; i++){
        printf("%.2f\n", x[i]);
    }
    
    free(x);
}


Questão 15-
#include <stdio.h>
#include <stdlib.h>

int compare (const void * a, const void * b)//definindo a função de comparação que irá ser utilizada pelo qsort
{
  return ( *(int*)a - *(int*)b ); //dando cast nos tipos const void *a para valores inteiros para que possamos fz uma subtração
}

int main(){
    float *x; //declarando ponteiro para float, para ser usado como vetor
    int i,j,n, tmp; //declarando variáveis inteiras para auxiliar no código
    printf("insira a qntd de floats"); //print
    scanf("%d", &n); //pegando input do usuário
    
    x = (float *) malloc(n * sizeof(float)); //alocando memória para o vetor de floats
    
    for (i = 0; i < n; i++){ //for para o usuário inserir cada valor do vetor
        printf("\nvalor pra posicao %d do vetor: ", i+1); //print
        scanf("%f",&x[i]); //pegando input do usuário
    }
    
    qsort(x, n, sizeof(float), compare); //utilizando o qsort de acordo com a documentação do cplusplus.com
    
    for(i = 0; i<n; i++){
        printf("%.2f\n", x[i]); //imprimindo cada elemento do vetor após o sort
    }
    
    free(x);
    return 0;
}


Questão 16-
#include <stdio.h>
#include <stdlib.h>

int compare (float a, float b)//definindo a função de comparação que irá ser utilizada pelo qsort
{
  return a-b; //subtração a-b (retorna >1 se a for maior que b, ou seja, retorna true se for necessário trocar eles de lugar)
}

void meuSort (float* vetor, int len, int (*compar)(float,float)){
    int i, j, tmp;
    for(i = 0; i<len; i++){
        for(j = i+1; j<len; j++){
            if(compar(vetor[i], vetor[j])){
                tmp = vetor[i];
                vetor[i] = vetor[j];
                vetor[j] = tmp;
            }
        }
    }
}

int main(){
    float *x; //declarando ponteiro para float, para ser usado como vetor
    int i,j,n, tmp; //declarando variáveis inteiras para auxiliar no código
    printf("insira a qntd de floats"); //print
    scanf("%d", &n); //pegando input do usuário
    
    x = (float *) malloc(n * sizeof(float)); //alocando memória para o vetor de floats
    
    for (i = 0; i < n; i++){ //for para o usuário inserir cada valor do vetor
        printf("\nvalor pra posicao %d do vetor: ", i+1); //print
        scanf("%f",&x[i]); //pegando input do usuário
    }
    
    meuSort(x, n, compare); //utilizando minha funcao de sort (que só serve para vetores float)
    
    for(i = 0; i<n; i++){
        printf("%.2f\n", x[i]); //imprimindo cada elemento do vetor após o sort
    }
    
    free(x);
    return 0;
}


Questão 17-
qsort = 6 ciclos de clock
meu sort = 2 ciclos de clock
Esses resultados foram obtidos testando com um array de 5 posições, na seguinte ordem: 3, 2, 1, 5, 4.
Como é possível perceber meu sort é mais rápido por 4 ciclos de clock, no entanto, meu sort é específico e só 
funciona para arrays do tipo float. Enquanto que o qsort implementado pela própria linguagem C é generalista, 
e ordena qualquer tipo de variavel, com qualquer tamanho, e com qualquer regra de comparação definida por uma
função de comparação. Portanto, é de se esperar que a função qsort demore mais ciclos de clock, já que 
provavelmente têm muitos passos a mais se comparada ao meu sort, implementado na questão 16.


Questão 18-
#include <stdio.h>
#include <stdlib.h>

int main(){
    float *x, *y, *z; 
    int i,j,n, tmp; 
    printf("insira a qntd de floats"); 
    scanf("%d", &n);
    
    x = (float *) malloc(n * sizeof(float)); //alocando memória para o vetor de floats
    y = (float *) malloc(n * sizeof(float)); //alocando memória para o vetor de floats
    z = (float *) malloc(n * sizeof(float)); //alocando memória para o vetor de floats
    
    for (i = 0; i < n; i++){ 
        printf("\nvalor pra posicao %d do vetor x: ", i+1); 
        scanf("%f",&x[i]); 
    }
    for (i = 0; i < n; i++){ 
        printf("\nvalor pra posicao %d do vetor y: ", i+1); 
        scanf("%f",&y[i]); 
    }
    for (i = 0; i < n; i++){
        z[i] = x[i] + y[i];
    }
    
    for(i = 0; i<n; i++){
        printf("%.2f\n", z[i]); 
    }
    
    free(x);
    free(y);
    free(z);
    return 0;
}


Questão 19-
#include <stdio.h>
#include <stdlib.h>

void multiplicarMatriz(int **A,int **B,int **C, int nla, int nca, int ncb){
    int i, j, k, soma=0;
    for(i = 0; i<nla;i++){
        for(j = 0; j<ncb;j++){
            for(k = 0; k<nca; k++){
                soma = soma + A[i][k]*B[k][j];
            }
            C[i][j] = soma;
            soma = 0;
        }
    }
}

int main()
{
    int nla=2, nca=3, nlb = nca, ncb = 2, i, j;
    
    //alocar A
    int** A = (int**) malloc(nla*sizeof(int*));
    for(i = 0; i<nla;i++){
        A[i] = (int*) malloc(nca*sizeof(int));
    }
    
    //alocar B
    int** B = (int**) malloc(nlb*sizeof(int*));
    for(i = 0; i<nlb;i++){
        B[i] = (int*) malloc(ncb*sizeof(int));
    }
    
    //alocar C
    int** C = (int**) malloc(nla*sizeof(int*));
    for(i = 0; i<nca;i++){
        C[i] = (int*) malloc(ncb*sizeof(int));
    }
    
    //atribuir A
    for(i = 0; i<nla;i++){
        for(j = 0; j<nca;j++){
            A[i][j] = i+j;
        }
    }
    
    //atribuir B
    for(i = 0; i<nlb;i++){
        for(j = 0; j<ncb;j++){
            B[i][j] = i+j;
        }
    }
    
    //printar A
    for(i = 0; i<nla;i++){
        for(j = 0; j<nca;j++){
            printf("%d ", A[i][j]);
        }
        printf("\n");
    }
    
    printf("\n");
    
    //printar B
    for(i = 0; i<nlb;i++){
        for(j = 0; j<ncb;j++){
            printf("%d ", B[i][j]);
        }
        printf("\n");
    }
    
    multiplicarMatriz(A, B, C, nla, nca, ncb);
    
    printf("\n");
    
    //printar C
    for(i = 0; i<nla;i++){
        for(j = 0; j<ncb;j++){
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}


Questão 20-
#include <stdio.h>
#include <stdlib.h>
#include "gc.h"

//refazendo o exemplo de sala de uma matriz alocada eficientemente usando libgc

int main(){
  int **x;
  int nlin, ncol;
  int i, j;

  nlin=3; ncol=4;
  
  GC_INIT(); //inicializando a biblioteca

  x = GC_MALLOC(nlin*sizeof(int*)); //alocando memória usando a função malloc do libcg

  x[0]= GC_MALLOC(nlin*ncol*sizeof(int)); //alocando memória usando a função malloc do libcg

  for(i=1; i<nlin; i++){
    x[i] = x[i-1] + ncol;
  }

  for(i=0; i<nlin; i++){
    for(j=0; j<ncol; j++){
      x[i][j] = i+j;
    }
  }

  for(i=0; i<nlin; i++){
    for(j=0; j<ncol; j++){
      printf("%2d, ", x[i][j]);
    }
    printf("\n");
  }
    
    // não é necessário o uso de free com essa biblioteca, pois os GC_MALLOCS vão ser reciclados
    // a medida que a biblioteca for percebendo que aquele pedaço de memória não será mais acessado
  return 0;
}
